For Windows with MinGW gcc install:

clone whitecat_crossplateform to c:/ if it is cloned somewhere else you must change the path during the compilation of the librarie whith <path of whitecat_crossplateform> insted of C:\whitecat_crossplateform

clone inside the whitecat_crossplateform the following two repository, whitecatlib and whitecatbuild.
To do that, open the git shell and tape:
cd <path of whitecat_crossplateform folder>
git clone git@github.com:ChristophGuillermet/whitecatlib.git
git clone git@github.com:ChristophGuillermet/whitecatbuild.git

In the DEVKIT/Windows folder (you can know download it from the release 0.5.8.3 of the whitecat_crossplateform repository) :

1- lunch mingw-get-setup.exe install it on C:/MinGW
In the dialogue box check mark for instatlation all the basic setup package+ all the package listed in the file MinGWpackageinstalled.rtf
click in the instalation menu on  Apply changes
click in the instalation menu on  mark all upgrade
click in the instalation menu on  Apply changes


2-install Cmake with install cmake to the system path for all user option

3-install codeblocks-13.12-setup.exe


4-make a right click on the Computer icon on the start menu, select propriety, click on advanced system, on the tab environement variable, 
user variable:
in the Path variableadd at the end ;C:\MinGW\bin 
in system variable:
add or modify the PATH variable whith C:\MinGW\bin;C:\MinGW;C:\Python27;C:\MinGW\opencv2.4.8\x86\mingw\bin
add or modify the ALLEGRO variable with C:\MinGW
add or modify the MINGDIR variable with C:\MinGW
add or modify the PKG_CONFIG_PATH variable with C:\MinGW
add or modify the OPENCV_DIR variable with C:\MinGW\opencv2.4.8\x86\mingw
add or modify the PYTHONPATH variable with C:\Python27 or your python path

Follow all the next steps to build the librairies yourself or just lunch whitecat_crossplateform\IDE\CodeBlocks\whitecatMinGW\Whitecat_Crossplatform\Whitecat_precompiled_relativ_lib.cbp or install dev-C++ as mentioned in INSTALL_With_DEV_C++.txt and lunch whitecat_crossplateform\IDE\DEV-C++\WhiteCat_crossplateform_with_relativ_lib.dev


5-install 7zip

6-install GetGnuWin32-0.6.3.exe in DEVKIT/windows folder
open GetGnuWin32 and open in it download.bat
open install.bat
copy gnuwin32 folder to C:\MinGW
in C:\MinGW\gnuwin32 run update-link.bat

7-install opencodecs_0.85.17777.exe


To build the librarie environement follow all the folowing steps or replace your C:/MinGW by the one in https://github.com/AntonLanghoff/MinGW it is cut in 9 files, you must combine them with 7zip

In the DEVKIT
1-copy and replace in C:/minGW/include the content of dx80_mgw/include
copy and replace in c:/minGW/lib the content of dx80_mgw/lib


2-if its not install by your mingw instalation install patch-2.5.9-7-setup.exe


Libraries:

In the lib/libsource folder:
Do all this in a administrator session
uncompress allegro4.4.2_sources_dep.zip to windowsMinGW
In the windowsMingW/allegro4.4.2_sources_dep/allegro4.4.2_sources_dep folder

1-build zlib
all ready build with your version of mingw

2- build libpng
same With cmake
In CMAKE_BUILD_TYPE write RelWithDebInfo
in CMAKE_INSTALL_PREFIX write c:/MinGW/bin/zlib
With PNG_SHARED,PNG_STATIC and PNG_TEST checked
in the shell write:
cd "C:/whitecat_crossplateform/lib/libsource/allegro4.4.2_sources_dep/allegro4.4.2_sources_dep/libpng/build" or cd"drag the zlib/build folder to the shell and "
mingw32-make install


3-build libogg
uncompress libogg-1.3.1.zip to libsource/windowsMinGW
open in c:/MinGW/msys/1.0/msys.bat to open an terminal
type:
cd <path of libsource/windowsMinGW/libogg-1.3.1/libogg-1.3.1>
./configure --prefix=/c/mingw
make
make install

4- do the same as libogg for libvorbis1.3.4

5-copy pkg-config.exe from DEVKIT/Windows/pkg-config_0.23-3_win32/bin into C/MinGW/bin
copy libglib-2.0-0.dll from DEVKIT/WINDOWSglib_2.28.1-1_win32/bin into C/MinGW/bin
must now open an MSYS shell(open MinGW/msys/1.0/msys.bat):
cd C:/MinGW/bin
cp libintl-8.dll intl.dll

6-uncompress allegro-4.4.2+borderless.zip to libsource/windowsMinGW

whith cmake open allegro-4.4.2+borderless/allegro as sourcecodefolder and create a allegro4.4.2minGW folder in the allegro-4.4.2+borderless folder for the build binary click configure and select minGW Makefiles
Change the CMAKE_Build_TYPE to RelWithDebInfo
change the CMAKE_INSTALL_PREFIX to C:/MinGW
select just WANT_ALLEGROGL, WANT_DOCS,WANT_DOCS_INFO,WANT_DOCS_MAN, WANT_EXEMPLES, WANT_JPGALLEG,WANT_LOADPNG, WANT_LOGG, WANT_TEST,WANT_TooL
click configure again
click generate
open aterminal (windows+R) +cmd
write:
cd <path of whitecat crossplatform> /lib/libsource/windowsMinGW/allegro-4.4.2/allegro4.4.2minGW
mingw32-make
mingw32-make install


7-install freetype
uncompress freetype-2.5.2.tar.gz in lib/libsource/openlayer-2.1.perso/dependance
build it with cmake, CMAKE_INSTALL_PREFIX C:/MinGW etc.. 
create a freetypeMinGW folder in the dependance/freetyp-2.5.2 to build the source
open a terminal:
cd <path to freetypeMinGW folder>
mingw32-make
mingw32-make install


8-install Openlayer

always same stuff with cmake gui
in source get C:/whitecat_crossplateform/lib/libsource/openlayer-2.1perso/openlayer-2.1+borderless/openlayer-2.1
in build get C:/whitecat_crossplateform/lib/libsource/openlayer-2.1perso/openlayer-2.1+borderless/openlayer-2.1MinGW
click configure until he find all
CMake_InSTALL_PREFIX C:/MinGW
CEATE_STATIC_LIB on
all other be off
mingw32-make
mingw32-make install



9-install opencv
follow the tuto in Installation in Windows — OpenCV 2.4.8.0.htm to install all dependance 
uncompress opencv-2.4.8.zip in lib/libsource/openCV-2.4.8/unix

lunch cmake gui
as source C:/whitecat_crossplateform/lib/libsource/openCV-2.4.8/unix/opencv-2.4.8/opencv-2.4.8
as build C:/whitecat_crossplateform/lib/libsource/openCV-2.4.8/unix/opencv-2.4.8/opencv-2.4.8/build
-BuilD_Doc, BuilD_JASPER, BUILD_JPEG, BUILD_OPENEXR, BUILD_PACKAGE, BUILD_PERF_TESTS, BUILD_PNG, BUILD_SHARED_LIB, BUILD_TIFF, BUILD_WITH_DEBUG_INFO, and all BUILD_opencv expect world is on

-CMAKE_INSTALL_PREFIX C:/MinGW/opencv2.4.8

-WITH_CUDA, WITH_CUFFT,WITH_DSHOW,WITH_EIGEN,WITH_FFMPEG,WITH_JASPER,WITH_JPEG,WITH_OPENCL, WITH OPENEXR, WITH_OPENGL, WITH_PNG, WITH_PVAPI, WITH_TIFF, WITH_VFW, WITH_WIN32UI is on
all others is off
in a terminal 
cd C:\whitecat_crossplateform\lib\libsource\openCV-2.4.8\unix\opencv-2.4.8\opencv-2.4.8\build
mingw32-make
mingw32-make install

10- uncompress zlib128.zip
lunch cmake gui
as source C:/whitecat_crossplateform\lib\libsource\zlib-1.2.8
as build C:/whitecat_crossplateform\lib\libsource\zlib-1.2.8/build
CMAKE_INSTALL_PREFIX C:/MinGW
INSTALL_BIN_DIR C:/MinGW/bin
INSTALL_INC_DIR C:/MinGW/include
INSTALL_LIB_DIR C:/MinGW/lib
INSTALL_MAN_DIR C:/MinGW/share/man
INSTALL_PKGCONFIG_DIR C:/MinGW/share/pkgconfig

11-uncompress libharu_2_0_8 to libsource
copy the MakeFile.mingw from source to libsource/libharu-2.0.8/script
open in c:/MinGW/msys/1.0/msys.bat to open an terminal
type:
cd <path of libsource/libharu-2.0.8>
./configure --prefix=/c/mingw
make -f script/Makefile.mingw
make install

12-install Serial_master
to install the python catkin dep package:
lunch a command prompt and type cd <your pytohn2.7/Scripts> 
type: 
easy_install.exe catkin_pkg
easy_install.exe empy
easy_install.exe nose


to install catkin
lunch CMake GUI
as source select: <path to lib/libsource/catkin-indigo-devel>
as build select: <path to lib/libsource/catkin-indigo-devel/build>
CMAKE_BUILD_TYPE RelWithDebInfo
CMAKE_INSTALL_PREFIX C:/MinGW
BUILD_SHARED_LIBS is uncheck
configure
generate

in a console
cd <path to lib/libsource/catkin-indigo-devel/build>
mingw32-make
mingw32-make install

lunch C:\whitecat_crossplateform\IDE\CodeBlocks\whitecatMinGW\Whitecat_Crossplatform.cbp
l'exe whitecat est dans le dossier whitecatbuild/build/mingw_build/white_cat

If it's work for you to build on an other plateform, please send a zip with the libs and the build.

