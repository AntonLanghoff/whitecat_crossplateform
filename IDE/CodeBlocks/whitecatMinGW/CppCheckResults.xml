<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="1387" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="1392" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="1401" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="1406" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="1384" id="resourceLeak" severity="error" msg="Resource leak: cfg_file" />
    <error file="..\..\..\Src\CORE_6.cpp" line="2105" id="uselessAssignmentPtrArg" severity="style" msg="Assignment of function parameter has no effect outside the function." />
    <error file="..\..\..\Src\CORE_6.cpp" line="2670" id="variableScope" severity="style" msg="The scope of the variable &apos;isSomeone&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\CORE_6.cpp" line="2946" id="variableScope" severity="style" msg="The scope of the variable &apos;position_minutes&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\CORE_6.cpp" line="4852" id="variableScope" severity="style" msg="The scope of the variable &apos;the_chaser&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\CORE_6.cpp" line="4853" id="variableScope" severity="style" msg="The scope of the variable &apos;the_grid_player&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\CORE_6.cpp" line="4854" id="variableScope" severity="style" msg="The scope of the variable &apos;the_audio_player&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\CORE_6.cpp" line="5359" id="variableScope" severity="style" msg="The scope of the variable &apos;dd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\CORE_6.cpp" line="1987" id="passedByValue" severity="style" msg="Parameter &apos;command&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\CORE_6.cpp" line="2437" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\CORE_6.cpp" line="4440" id="uninitvar" severity="error" msg="Uninitialized variable: thedockused" />
    <error file="..\..\..\Src\Draw3.cpp" line="63" id="variableScope" severity="style" msg="The scope of the variable &apos;value_grid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\MAIN_janv_2014_opensource_kbd.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\arduino_6_UNO.cpp" line="444" id="incorrectLogicOperator" severity="style" msg="Logical disjunction always evaluates to true: EXPR &gt;= 17 || EXPR &lt;= 32. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="604" id="variableScope" severity="style" msg="The scope of the variable &apos;temp_send_pwm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="677" id="variableScope" severity="style" msg="The scope of the variable &apos;temp_send&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\whitecatlib\lib\windows\Cserial\serial.cpp" line="63" id="redundantAssignment" severity="style" msg="Variable &apos;ucSet&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\whitecatlib\lib\windows\Cserial\serial.cpp" line="64" id="redundantAssignment" severity="style" msg="Variable &apos;ucSet&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\whitecatlib\lib\windows\Cserial\serial.cpp" line="64" id="unreadVariable" severity="style" msg="Variable &apos;ucSet&apos; is assigned a value that is never used." />
    <error file="..\..\..\whitecatlib\lib\windows\Cserial\serial.cpp" line="70" id="unreadVariable" severity="style" msg="Variable &apos;dwError&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\audio_core5.cpp" line="47" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\audio_core5.cpp" line="74" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\banger_core_8.cpp" line="119" id="variableScope" severity="style" msg="The scope of the variable &apos;param1_is&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\banger_core_8.cpp" line="4756" id="variableScope" severity="style" msg="The scope of the variable &apos;banger_overoll&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\banger_core_8.cpp" line="4695" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;banger_is&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="..\..\..\Src\banger_core_8.cpp" line="4087" id="incorrectLogicOperator" severity="style" msg="Logical disjunction always evaluates to true: param2_is &gt;= 0 || param2_is &lt;= 127. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?" />
    <error file="..\..\..\Src\channels_9_core.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\chasers_core_5.cpp" line="861" id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_str_stp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="171" id="redundantAssignment" severity="style" msg="Variable &apos;res&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="77" id="unusedStructMember" severity="style" msg="struct or union member &apos;DMXUSBPROSetParamsType::UserSizeLSB&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="78" id="unusedStructMember" severity="style" msg="struct or union member &apos;DMXUSBPROSetParamsType::UserSizeMSB&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="79" id="unusedStructMember" severity="style" msg="struct or union member &apos;DMXUSBPROSetParamsType::BreakTime&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="80" id="unusedStructMember" severity="style" msg="struct or union member &apos;DMXUSBPROSetParamsType::MaBTime&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="81" id="unusedStructMember" severity="style" msg="struct or union member &apos;DMXUSBPROSetParamsType::RefreshRate&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="87" id="unusedStructMember" severity="style" msg="struct or union member &apos;ReceivedDmxCosStruct::start_changed_byte_number&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="88" id="unusedStructMember" severity="style" msg="struct or union member &apos;ReceivedDmxCosStruct::changed_byte_array&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="89" id="unusedStructMember" severity="style" msg="struct or union member &apos;ReceivedDmxCosStruct::changed_byte_data&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro_FTDI.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\dmx_ftdi_IN_test_enttec_pro.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\dmx_functions_13.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\echo3.cpp" line="155" id="redundantAssignment" severity="style" msg="Variable &apos;mouse_y_level&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\Src\echo3.cpp" line="447" id="variableScope" severity="style" msg="The scope of the variable &apos;echochanis&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\echo3.cpp" line="482" id="variableScope" severity="style" msg="The scope of the variable &apos;tcmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\echo3.cpp" line="727" id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_lev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="939" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="1236" id="variableScope" severity="style" msg="The scope of the variable &apos;the_chaser&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="1237" id="variableScope" severity="style" msg="The scope of the variable &apos;the_grid_player&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="1238" id="variableScope" severity="style" msg="The scope of the variable &apos;the_audio_player&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\generate_strings_arrays.cpp" line="784" id="wrongPrintfScanfArgNum" severity="error" msg="sprintf format string requires 1 parameter but only 0 are given." />
    <error file="..\..\..\Src\graphics_rebuild1.cpp" line="290" id="passedByValue" severity="style" msg="Parameter &apos;title&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\graphics_rebuild1.cpp" line="290" id="passedByValue" severity="style" msg="Parameter &apos;subtitle&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\grider8.cpp" line="408" id="variableScope" severity="style" msg="The scope of the variable &apos;sttmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="423" id="variableScope" severity="style" msg="The scope of the variable &apos;gr_grille&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="424" id="variableScope" severity="style" msg="The scope of the variable &apos;gr_step&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="426" id="variableScope" severity="style" msg="The scope of the variable &apos;gr_grille_pr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="427" id="variableScope" severity="style" msg="The scope of the variable &apos;gr_step_pr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="357" id="uninitvar" severity="error" msg="Uninitialized variable: in_speed" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="359" id="uninitvar" severity="error" msg="Uninitialized variable: out_speed" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="385" id="uninitvar" severity="error" msg="Uninitialized variable: in_speed_preset" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="387" id="uninitvar" severity="error" msg="Uninitialized variable: out_speed_preset" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="361" id="uninitvar" severity="error" msg="Uninitialized variable: delay_in_speed" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="367" id="uninitvar" severity="error" msg="Uninitialized variable: delay_in_speed" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="363" id="uninitvar" severity="error" msg="Uninitialized variable: delay_out_speed" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="389" id="uninitvar" severity="error" msg="Uninitialized variable: delay_in_speed_preset" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="394" id="uninitvar" severity="error" msg="Uninitialized variable: delay_in_speed_preset" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="391" id="uninitvar" severity="error" msg="Uninitialized variable: delay_out_speed_preset" />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="412" id="uninitvar" severity="error" msg="Uninitialized variable: delay_out_speed_preset" />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="86" id="redundantAssignment" severity="style" msg="Variable &apos;valeur&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="63" id="passedByValue" severity="style" msg="Parameter &apos;dex&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="288" id="passedByValue" severity="style" msg="Parameter &apos;titre&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="632" id="passedByValue" severity="style" msg="Parameter &apos;desc&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="632" id="passedByValue" severity="style" msg="Parameter &apos;shortcut&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="731" id="passedByValue" severity="style" msg="Parameter &apos;desc&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="731" id="passedByValue" severity="style" msg="Parameter &apos;raccourci&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\iCat14.cpp" line="955" id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." />
    <error file="..\..\..\Src\iCat14.cpp" line="2239" id="variableScope" severity="style" msg="The scope of the variable &apos;fsTestX2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\iCat14.cpp" line="2239" id="variableScope" severity="style" msg="The scope of the variable &apos;fsTestY2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\iCat14.cpp" line="2279" id="variableScope" severity="style" msg="The scope of the variable &apos;banger_back_is&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\iCat14.cpp" line="3806" id="variableScope" severity="style" msg="The scope of the variable &apos;fsTestX2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\iCat14.cpp" line="3806" id="variableScope" severity="style" msg="The scope of the variable &apos;fsTestY2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1275" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1292" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="97" id="variableScope" severity="style" msg="The scope of the variable &apos;circ&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="193" id="variableScope" severity="style" msg="The scope of the variable &apos;circ&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="292" id="variableScope" severity="style" msg="The scope of the variable &apos;circ&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="383" id="variableScope" severity="style" msg="The scope of the variable &apos;circ&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\keyboard_routines2.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\list_proj_core.cpp" line="206" id="redundantAssignment" severity="style" msg="Variable &apos;lev_to_do&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\Src\list_proj_core.cpp" line="244" id="redundantAssignment" severity="style" msg="Variable &apos;pitc_to_do&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\Src\list_proj_core.cpp" line="284" id="redundantAssignment" severity="style" msg="Variable &apos;pitc_to_do&apos; is reassigned a value before the old one has been used." />
    <error file="..\..\..\Src\list_proj_core.cpp" line="482" id="variableScope" severity="style" msg="The scope of the variable &apos;temp_mini&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\list_proj_core.cpp" line="483" id="variableScope" severity="style" msg="The scope of the variable &apos;temp_limit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\midi_13.cpp" line="3154" id="variableScope" severity="style" msg="The scope of the variable &apos;index_atoi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\midi_13.cpp" line="3891" id="variableScope" severity="style" msg="The scope of the variable &apos;ref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\minifaders_core.cpp" line="529" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\mover_2013.cpp" line="1734" id="duplicateIf" severity="style" msg="Duplicate conditions in &apos;if&apos; and related &apos;else if&apos;. This is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\mover_spline6.cpp" line="135" id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\network_artnet_3.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\numpad_visuel.cpp" line="189" id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." />
    <error file="..\..\..\Src\patch_splines_2.cpp" line="131" id="variableScope" severity="style" msg="The scope of the variable &apos;index_sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot.cpp" line="2047" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\plot.cpp" line="47" id="variableScope" severity="style" msg="The scope of the variable &apos;isSomeone&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot.cpp" line="48" id="variableScope" severity="style" msg="The scope of the variable &apos;nrbe_de_fichiers&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot.cpp" line="1924" id="unreadVariable" severity="style" msg="Variable &apos;pos&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\plot.cpp" line="2199" id="unreadVariable" severity="style" msg="Variable &apos;name_of_rep&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\plot.cpp" line="2394" id="unreadVariable" severity="style" msg="Variable &apos;pos&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\plot.cpp" line="2197" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\plot9.cpp" line="2571" id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." />
    <error file="..\..\..\Src\plot9.cpp" line="708" id="variableScope" severity="style" msg="The scope of the variable &apos;txcl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="709" id="variableScope" severity="style" msg="The scope of the variable &apos;tycl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="807" id="variableScope" severity="style" msg="The scope of the variable &apos;txcl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="808" id="variableScope" severity="style" msg="The scope of the variable &apos;tycl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="3069" id="variableScope" severity="style" msg="The scope of the variable &apos;ployx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="3070" id="variableScope" severity="style" msg="The scope of the variable &apos;ployy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="3678" id="variableScope" severity="style" msg="The scope of the variable &apos;TextPlot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="4879" id="variableScope" severity="style" msg="The scope of the variable &apos;way&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot9.cpp" line="4271" id="unreadVariable" severity="style" msg="Variable &apos;name_of_rep&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\plot9.cpp" line="4900" id="unreadVariable" severity="style" msg="Variable &apos;way&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\plot9.cpp" line="3116" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\plot9.cpp" line="4269" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\plot_core9.cpp" line="2890" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\plot_core9.cpp" line="264" id="variableScope" severity="style" msg="The scope of the variable &apos;isSomeone&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\plot_core9.cpp" line="265" id="variableScope" severity="style" msg="The scope of the variable &apos;nrbe_de_fichiers&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\procs_visuels_rebuild1.cpp" line="181" id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." />
    <error file="..\..\..\Src\save_show_13.cpp" line="606" id="nullPointer" severity="style" msg="Possible null pointer dereference: fpm - otherwise it is redundant to check it against null." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1409" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="..\..\..\Src\save_show_13.cpp" line="711" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="736" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="764" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="896" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="958" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1022" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1048" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1105" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1132" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1206" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1610" id="variableScope" severity="style" msg="The scope of the variable &apos;read_buff_winfil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1221" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\save_show_13.cpp" line="1621" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\save_show_13.cpp" line="606" id="resourceLeak" severity="error" msg="Resource leak: fpm" />
    <error file="..\..\..\Src\saves_export_import.cpp" line="484" id="nullPointer" severity="style" msg="Possible null pointer dereference: fpscwz - otherwise it is redundant to check it against null." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="70" id="variableScope" severity="style" msg="The scope of the variable &apos;cue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="71" id="variableScope" severity="style" msg="The scope of the variable &apos;down&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="72" id="variableScope" severity="style" msg="The scope of the variable &apos;up&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="75" id="variableScope" severity="style" msg="The scope of the variable &apos;autogotime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="78" id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="80" id="variableScope" severity="style" msg="The scope of the variable &apos;sub&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="81" id="variableScope" severity="style" msg="The scope of the variable &apos;ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="82" id="variableScope" severity="style" msg="The scope of the variable &apos;flagcue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="83" id="variableScope" severity="style" msg="The scope of the variable &apos;flagpatch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="84" id="variableScope" severity="style" msg="The scope of the variable &apos;flagsub&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="556" id="variableScope" severity="style" msg="The scope of the variable &apos;cue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="557" id="variableScope" severity="style" msg="The scope of the variable &apos;down&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="558" id="variableScope" severity="style" msg="The scope of the variable &apos;up&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="561" id="variableScope" severity="style" msg="The scope of the variable &apos;autogotime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="564" id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="566" id="variableScope" severity="style" msg="The scope of the variable &apos;sub&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="567" id="variableScope" severity="style" msg="The scope of the variable &apos;ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="568" id="variableScope" severity="style" msg="The scope of the variable &apos;flagcue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="569" id="variableScope" severity="style" msg="The scope of the variable &apos;flagpatch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="570" id="variableScope" severity="style" msg="The scope of the variable &apos;flagsub&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="699" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="..\..\..\Src\saves_export_import.cpp" line="440" id="resourceLeak" severity="error" msg="Resource leak: fpscwz" />
    <error file="..\..\..\Src\saves_export_pdf2.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="47" id="variableScope" severity="style" msg="The scope of the variable &apos;isDir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="48" id="variableScope" severity="style" msg="The scope of the variable &apos;nbre_de_shows&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="90" id="variableScope" severity="style" msg="The scope of the variable &apos;isSomeone&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="91" id="variableScope" severity="style" msg="The scope of the variable &apos;nrbe_de_fichiers&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="261" id="unreadVariable" severity="style" msg="Variable &apos;name_of_rep&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="391" id="unreadVariable" severity="style" msg="Variable &apos;name_of_rep&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="523" id="unreadVariable" severity="style" msg="Variable &apos;name_of_rep&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="617" id="unreadVariable" severity="style" msg="Variable &apos;name_of_rep&apos; is assigned a value that is never used." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="259" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="389" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="521" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\saves_menu_8.cpp" line="615" id="passedByValue" severity="style" msg="Parameter &apos;label&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="..\..\..\Src\tracker_main14nov.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\video_tracking_core.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\..\..\Src\graphics_rebuild1.cpp" line="92" id="unusedFunction" severity="style" msg="The function &apos;Boxes&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="396" id="unusedFunction" severity="style" msg="The function &apos;Close_EnttecProOut&apos; is never used." />
    <error file="..\..\..\Src\faders_visuels_26.cpp" line="509" id="unusedFunction" severity="style" msg="The function &apos;Commandes_faders_generales&apos; is never used." />
    <error file="..\..\..\Src\audio_core5.cpp" line="515" id="unusedFunction" severity="style" msg="The function &apos;Control_Audio_thruth_faders&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="309" id="unusedFunction" severity="style" msg="The function &apos;Detect_EnttecProOut&apos; is never used." />
    <error file="..\..\..\Src\iCat14.cpp" line="3992" id="unusedFunction" severity="style" msg="The function &apos;DoJobFantastickTouch&apos; is never used." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="74" id="unusedFunction" severity="style" msg="The function &apos;DoLock&apos; is never used." />
    <error file="..\..\..\Src\graphics_rebuild1.cpp" line="304" id="unusedFunction" severity="style" msg="The function &apos;DoMouse&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="261" id="unusedFunction" severity="style" msg="The function &apos;Enttec_Pro_ReceiveData&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="157" id="unusedFunction" severity="style" msg="The function &apos;Enttec_Pro_SendData&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="1894" id="unusedFunction" severity="style" msg="The function &apos;Get_channels_from_memory&apos; is never used." />
    <error file="..\..\..\Src\help_2.cpp" line="45" id="unusedFunction" severity="style" msg="The function &apos;HelpWindow&apos; is never used." />
    <error file="..\..\..\Src\mover_2013.cpp" line="576" id="unusedFunction" severity="style" msg="The function &apos;ImportMoveInMyDock&apos; is never used." />
    <error file="..\..\..\Src\audio_core5.cpp" line="611" id="unusedFunction" severity="style" msg="The function &apos;InitSound&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1129" id="unusedFunction" severity="style" msg="The function &apos;Load_setup_conf&apos; is never used." />
    <error file="..\..\..\Src\faders_visuels_26.cpp" line="471" id="unusedFunction" severity="style" msg="The function &apos;Lock_Preset_Call&apos; is never used." />
    <error file="..\..\..\Src\mover_2013.cpp" line="1571" id="unusedFunction" severity="style" msg="The function &apos;Move_do_crossfade&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="562" id="unusedFunction" severity="style" msg="The function &apos;On_Open_name_of_directory&apos; is never used." />
    <error file="..\..\..\Src\dmx_enttec_pro.cpp" line="357" id="unusedFunction" severity="style" msg="The function &apos;Open_EnttecProOut&apos; is never used." />
    <error file="..\..\..\Src\graphics_rebuild1.cpp" line="290" id="unusedFunction" severity="style" msg="The function &apos;Procedure&apos; is never used." />
    <error file="..\..\..\Src\iCat14.cpp" line="4006" id="unusedFunction" severity="style" msg="The function &apos;ReceiveFantastick&apos; is never used." />
    <error file="..\..\..\Src\dmx_sunlite.cpp" line="182" id="unusedFunction" severity="style" msg="The function &apos;Receive_sunlite_dmxIN&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="856" id="unusedFunction" severity="style" msg="The function &apos;Save_Screen_Config&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1161" id="unusedFunction" severity="style" msg="The function &apos;Save_setup_conf&apos; is never used." />
    <error file="..\..\..\Src\faders_visuels_26.cpp" line="458" id="unusedFunction" severity="style" msg="The function &apos;Touche_Midi_Mute&apos; is never used." />
    <error file="..\..\..\Src\plot_core9.cpp" line="785" id="unusedFunction" severity="style" msg="The function &apos;add_selected_shapes&apos; is never used." />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="761" id="unusedFunction" severity="style" msg="The function &apos;arduino__send_config&apos; is never used." />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="71" id="unusedFunction" severity="style" msg="The function &apos;arduino_do_analog_in_whitecat&apos; is never used." />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="245" id="unusedFunction" severity="style" msg="The function &apos;arduino_do_digital_in_whitecat&apos; is never used." />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="674" id="unusedFunction" severity="style" msg="The function &apos;arduino_do_digital_out_whitecat&apos; is never used." />
    <error file="..\..\..\Src\arduino_core_6_UNO.cpp" line="600" id="unusedFunction" severity="style" msg="The function &apos;arduino_do_pwm_out_whitecat&apos; is never used." />
    <error file="..\..\..\Src\arduino_6_UNO.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;arduino_read&apos; is never used." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="44" id="unusedFunction" severity="style" msg="The function &apos;bouton_on_view&apos; is never used." />
    <error file="..\..\..\Src\patch_splines_2.cpp" line="326" id="unusedFunction" severity="style" msg="The function &apos;build_inverse_curve&apos; is never used." />
    <error file="..\..\..\Src\chasers_core_5.cpp" line="660" id="unusedFunction" severity="style" msg="The function &apos;chaser_select_no_track&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="172" id="unusedFunction" severity="style" msg="The function &apos;check_channel_is_patched&apos; is never used." />
    <error file="..\..\..\Src\procs_visuels_rebuild1.cpp" line="463" id="unusedFunction" severity="style" msg="The function &apos;check_graphics_mouse_handling&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="899" id="unusedFunction" severity="style" msg="The function &apos;check_presence_of_A_channel_in_A_view&apos; is never used." />
    <error file="..\..\..\Src\gestionaire_fenetres2.cpp" line="459" id="unusedFunction" severity="style" msg="The function &apos;check_save_load_report_window&apos; is never used." />
    <error file="..\..\..\Src\dmx_sunlite.cpp" line="109" id="unusedFunction" severity="style" msg="The function &apos;close_sunlite&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="2421" id="unusedFunction" severity="style" msg="The function &apos;detect_actual_master_lock_is&apos; is never used." />
    <error file="..\..\..\Src\procs_visuels_rebuild1.cpp" line="60" id="unusedFunction" severity="style" msg="The function &apos;detection_over_window&apos; is never used." />
    <error file="..\..\..\Src\plot_core9.cpp" line="46" id="unusedFunction" severity="style" msg="The function &apos;do_a_screen_capture&apos; is never used." />
    <error file="..\..\..\Src\chasers_core_5.cpp" line="1369" id="unusedFunction" severity="style" msg="The function &apos;do_autolaunch&apos; is never used." />
    <error file="..\..\..\Src\banger_core_8.cpp" line="4693" id="unusedFunction" severity="style" msg="The function &apos;do_bang&apos; is never used." />
    <error file="..\..\..\Src\list_proj_core.cpp" line="420" id="unusedFunction" severity="style" msg="The function &apos;do_channels_macro&apos; is never used." />
    <error file="..\..\..\Src\chasers_core_5.cpp" line="233" id="unusedFunction" severity="style" msg="The function &apos;do_chaser&apos; is never used." />
    <error file="..\..\..\Src\echo3.cpp" line="118" id="unusedFunction" severity="style" msg="The function &apos;do_echo&apos; is never used." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="421" id="unusedFunction" severity="style" msg="The function &apos;do_grid&apos; is never used." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;do_logical_Lock_Preset_Call&apos; is never used." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="787" id="unusedFunction" severity="style" msg="The function &apos;do_logical_Touche_Midi_Mute&apos; is never used." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="81" id="unusedFunction" severity="style" msg="The function &apos;do_logical_rotatif&apos; is never used." />
    <error file="..\..\..\Src\banger_core_8.cpp" line="4679" id="unusedFunction" severity="style" msg="The function &apos;do_loop_bang&apos; is never used." />
    <error file="..\..\..\Src\plot_core9.cpp" line="54" id="unusedFunction" severity="style" msg="The function &apos;do_plot_screen_capture&apos; is never used." />
    <error file="..\..\..\Src\saves_export_import.cpp" line="44" id="unusedFunction" severity="style" msg="The function &apos;do_reset_all_listproj&apos; is never used." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="763" id="unusedFunction" severity="style" msg="The function &apos;do_scroll_fader_space&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="5177" id="unusedFunction" severity="style" msg="The function &apos;do_sprintf_job&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="44" id="unusedFunction" severity="style" msg="The function &apos;generation_Tableau_noms_clavier_FR&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="573" id="unusedFunction" severity="style" msg="The function &apos;get_current_time&apos; is never used." />
    <error file="..\..\..\Src\faders_core_24.cpp" line="44" id="unusedFunction" severity="style" msg="The function &apos;indicate_wich_fader_is_the_highest&apos; is never used." />
    <error file="..\..\..\Src\iCat14.cpp" line="56" id="unusedFunction" severity="style" msg="The function &apos;init_iphone_fonts&apos; is never used." />
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="44" id="unusedFunction" severity="style" msg="The function &apos;init_kbd_custom&apos; is never used." />
    <error file="..\..\..\Src\gestionaire_fenetres2.cpp" line="67" id="unusedFunction" severity="style" msg="The function &apos;initialisation_tableau_windows&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="669" id="unusedFunction" severity="style" msg="The function &apos;key_add_ch&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="524" id="unusedFunction" severity="style" msg="The function &apos;key_affectation&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1305" id="unusedFunction" severity="style" msg="The function &apos;key_at_zero&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1382" id="unusedFunction" severity="style" msg="The function &apos;key_backward&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="916" id="unusedFunction" severity="style" msg="The function &apos;key_down&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1412" id="unusedFunction" severity="style" msg="The function &apos;key_forward&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1193" id="unusedFunction" severity="style" msg="The function &apos;key_full&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1157" id="unusedFunction" severity="style" msg="The function &apos;key_go&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1470" id="unusedFunction" severity="style" msg="The function &apos;key_left&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="745" id="unusedFunction" severity="style" msg="The function &apos;key_minus_ch&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1178" id="unusedFunction" severity="style" msg="The function &apos;key_presetvideo&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1499" id="unusedFunction" severity="style" msg="The function &apos;key_printscreen&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1485" id="unusedFunction" severity="style" msg="The function &apos;key_right&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1184" id="unusedFunction" severity="style" msg="The function &apos;key_roi&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1443" id="unusedFunction" severity="style" msg="The function &apos;key_select_all&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1322" id="unusedFunction" severity="style" msg="The function &apos;key_select_inv&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="500" id="unusedFunction" severity="style" msg="The function &apos;key_switch_window_down&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="473" id="unusedFunction" severity="style" msg="The function &apos;key_switch_window_up&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1052" id="unusedFunction" severity="style" msg="The function &apos;key_thruth&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1211" id="unusedFunction" severity="style" msg="The function &apos;key_time_in&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1266" id="unusedFunction" severity="style" msg="The function &apos;key_time_in_out&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1237" id="unusedFunction" severity="style" msg="The function &apos;key_time_out&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="1013" id="unusedFunction" severity="style" msg="The function &apos;key_unselect_ch&apos; is never used." />
    <error file="..\..\..\Src\keyboard_functions2.cpp" line="804" id="unusedFunction" severity="style" msg="The function &apos;key_up&apos; is never used." />
    <error file="..\..\..\Src\midi_launchpad.cpp" line="185" id="unusedFunction" severity="style" msg="The function &apos;launchpad_set_bool_value&apos; is never used." />
    <error file="..\..\..\Src\midi_launchpad.cpp" line="173" id="unusedFunction" severity="style" msg="The function &apos;launchpad_set_led&apos; is never used." />
    <error file="..\..\..\Src\midi_launchpad.cpp" line="194" id="unusedFunction" severity="style" msg="The function &apos;launchpad_set_zero_value&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="761" id="unusedFunction" severity="style" msg="The function &apos;load_core_config&apos; is never used." />
    <error file="..\..\..\Src\CFG_config_panel_8.cpp" line="1366" id="unusedFunction" severity="style" msg="The function &apos;load_network_conf&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="708" id="unusedFunction" severity="style" msg="The function &apos;load_onstart_config&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="733" id="unusedFunction" severity="style" msg="The function &apos;load_screen_config&apos; is never used." />
    <error file="..\..\..\Src\save_show_13.cpp" line="1453" id="unusedFunction" severity="style" msg="The function &apos;load_show_coming_from&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="5120" id="unusedFunction" severity="style" msg="The function &apos;match_minifaders&apos; is never used." />
    <error file="..\..\..\Src\Draw3.cpp" line="57" id="unusedFunction" severity="style" msg="The function &apos;merge_draw_and_grid_player&apos; is never used." />
    <error file="..\..\..\Src\midi_CORE.cpp" line="51" id="unusedFunction" severity="style" msg="The function &apos;midi_init_sepecial_case_key_on&apos; is never used." />
    <error file="..\..\..\Src\dmx_sunlite.cpp" line="67" id="unusedFunction" severity="style" msg="The function &apos;open_sunlite&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="3242" id="unusedFunction" severity="style" msg="The function &apos;patch_straight&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="294" id="unusedFunction" severity="style" msg="The function &apos;record_channel_state_in_an_echo&apos; is never used." />
    <error file="..\..\..\Src\chasers_core_5.cpp" line="1564" id="unusedFunction" severity="style" msg="The function &apos;refresh_chaser_window_timeline_for_midi_out&apos; is never used." />
    <error file="..\..\..\Src\icat_core14.cpp" line="693" id="unusedFunction" severity="style" msg="The function &apos;refresh_check_buttons&apos; is never used." />
    <error file="..\..\..\Src\grider_calculs8.cpp" line="56" id="unusedFunction" severity="style" msg="The function &apos;refresh_step_in_player&apos; is never used." />
    <error file="..\..\..\Src\dmx_sunlite.cpp" line="195" id="unusedFunction" severity="style" msg="The function &apos;reset_dmx_out&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="1980" id="unusedFunction" severity="style" msg="The function &apos;reset_index_affect_midi&apos; is never used." />
    <error file="..\..\..\Src\mover_2013.cpp" line="49" id="unusedFunction" severity="style" msg="The function &apos;reset_memoires&apos; is never used." />
    <error file="..\..\..\Src\Call_everybody_5.cpp" line="44" id="unusedFunction" severity="style" msg="The function &apos;reset_other_index_cfg&apos; is never used." />
    <error file="..\..\..\Src\icat_core14.cpp" line="79" id="unusedFunction" severity="style" msg="The function &apos;reset_previous_levels_infos&apos; is never used." />
    <error file="..\..\..\Src\banger_core_8.cpp" line="82" id="unusedFunction" severity="style" msg="The function &apos;restore_state_of_fader_before_bang&apos; is never used." />
    <error file="..\..\..\Src\plot_core9.cpp" line="94" id="unusedFunction" severity="style" msg="The function &apos;right_click_on_plot&apos; is never used." />
    <error file="..\..\..\Src\gui_boutons_rebuild1.cpp" line="91" id="unusedFunction" severity="style" msg="The function &apos;rotatif&apos; is never used." />
    <error file="..\..\..\Src\chasers_visu.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;seek_cue_in_view&apos; is never used." />
    <error file="..\..\..\Src\chasers_visu.cpp" line="49" id="unusedFunction" severity="style" msg="The function &apos;set_cue_in_view&apos; is never used." />
    <error file="..\..\..\Src\chasers_visu.cpp" line="72" id="unusedFunction" severity="style" msg="The function &apos;set_cue_out_view&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="4361" id="unusedFunction" severity="style" msg="The function &apos;set_to_default_my_trackers&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="3788" id="unusedFunction" severity="style" msg="The function &apos;snap_mem_to_copy&apos; is never used." />
    <error file="..\..\..\Src\audio_core5.cpp" line="260" id="unusedFunction" severity="style" msg="The function &apos;sound_core_processing&apos; is never used." />
    <error file="..\..\..\Src\dmx_sunlite.cpp" line="144" id="unusedFunction" severity="style" msg="The function &apos;sunlite_send_data&apos; is never used." />
    <error file="..\..\..\Src\trichro_core2.cpp" line="97" id="unusedFunction" severity="style" msg="The function &apos;trichro_back_buffer&apos; is never used." />
    <error file="..\..\..\Src\midi_13.cpp" line="3526" id="unusedFunction" severity="style" msg="The function &apos;ventilation_midi_sur_crossfade&apos; is never used." />
    <error file="..\..\..\Src\mover_2013.cpp" line="1798" id="unusedFunction" severity="style" msg="The function &apos;ventilation_niveaux_mover&apos; is never used." />
    <error file="..\..\..\Src\procs_visuels_rebuild1.cpp" line="45" id="unusedFunction" severity="style" msg="The function &apos;wc_askConfirmWindowIsOpen&apos; is never used." />
    <error file="..\..\..\Src\CORE_6.cpp" line="5495" id="unusedFunction" severity="style" msg="The function &apos;window_who_is_on_top&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
